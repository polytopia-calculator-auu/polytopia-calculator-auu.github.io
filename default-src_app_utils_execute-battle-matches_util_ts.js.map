{"version":3,"file":"default-src_app_utils_execute-battle-matches_util_ts.js","mappings":"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","sources":["./src/app/data/unit-list.const.ts","./src/app/data/unit-stats.const.ts","./src/app/utils/calculate-damage.util.ts","./src/app/utils/calculate-max-hp.util.ts","./src/app/utils/combine.util.ts","./src/app/utils/deep-clone.util.ts","./src/app/utils/execute-battle-matches.util.ts","./src/app/utils/permute.util.ts"],"sourcesContent":["export const attackerUnits = [\r\n    'Warrior',\r\n    'Rider',\r\n    'Defender',\r\n    'Swordsman',\r\n    'Archer',\r\n    'Catapult',\r\n    'Knight',\r\n    'Old Knight',\r\n    'Giant',\r\n    'Boat',\r\n    'Ship',\r\n    'Battleship',\r\n    'Amphibian',\r\n    'Crab',\r\n    'Tridention',\r\n    'Polytaur',\r\n    'Navalon',\r\n    'Baby Dragon',\r\n    'Fire Dragon',\r\n    'Ice Archer',\r\n    'Battle Sled',\r\n    'Ice Fortress',\r\n    'Gaami',\r\n    'Shaman',\r\n    'Hexapod',\r\n    'Phychi',\r\n    'Raychi',\r\n    'Kiton',\r\n    'Old Kiton',\r\n    'Doomux',\r\n    'Exida',\r\n    'Centipede',\r\n    'Segment',\r\n    'Dagger',\r\n];\r\n\r\nexport const defenderUnits = [\r\n    'Warrior',\r\n    'Rider',\r\n    'Defender',\r\n    'Swordsman',\r\n    'Archer',\r\n    'Catapult',\r\n    'Knight',\r\n    'Old Knight',\r\n    'Giant',\r\n    'Boat',\r\n    'Ship',\r\n    'Battleship',\r\n    'Mind Bender',\r\n    'Amphibian',\r\n    'Crab',\r\n    'Tridention',\r\n    'Polytaur',\r\n    'Navalon',\r\n    'Dragon Egg',\r\n    'Baby Dragon',\r\n    'Fire Dragon',\r\n    'Mooni',\r\n    'Ice Archer',\r\n    'Battle Sled',\r\n    'Ice Fortress',\r\n    'Gaami',\r\n    'Shaman',\r\n    'Hexapod',\r\n    'Phychi',\r\n    'Raychi',\r\n    'Kiton',\r\n    'Old Kiton',\r\n    'Doomux',\r\n    'Exida',\r\n    'Centipede',\r\n    'Segment',\r\n    'Nature Bunny',\r\n    'Dinghy',\r\n    'Cloak',\r\n    'Dagger',\r\n];\r\n\r\nexport const noDefenseUnits = ['Mooni', 'Ice Archer', 'Dragon Egg', 'Mind Bender', 'Segment'];\r\nexport const freezingUnits = ['Ice Archer', 'Phychi', 'Dagger'];\r\n\r\nexport const landUnits = [\r\n    'Warrior',\r\n    'Rider',\r\n    'Defender',\r\n    'Swordsman',\r\n    'Archer',\r\n    'Catapult',\r\n    'Mind Bender',\r\n    'Knight',\r\n    'Old Knight',\r\n    'Giant',\r\n    'Polytaur',\r\n    'Nature Bunny'\r\n];\r\n\r\nexport const carryUnits = [\r\n    'Boat',\r\n    'Ship',\r\n    'Battleship'\r\n]\r\n\r\nexport const longRangeUnits = [\r\n    'Archer',\r\n    'Catapult',\r\n    'Boat',\r\n    'Ship',\r\n    'Battleship',\r\n    'Fire Dragon',\r\n    'Ice Archer',\r\n    'Ice Fortress',\r\n    'Phychi',\r\n    'Exida'\r\n]\r\n\r\ninterface Unit {\r\n    attack: number;\r\n    defense: number;\r\n    hp: number;\r\n    veteranHp: number | null;\r\n}","import { UnitStat } from '../models/unit-data.model';\r\n\r\nexport const unitStats: { [key: string]: UnitStat } = {\r\n    Warrior: {\r\n        attack: 2,\r\n        defense: 2,\r\n        hp: 10,\r\n        veteranHp: 15,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Rider: {\r\n        attack: 2,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: 15,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Defender: {\r\n        attack: 1,\r\n        defense: 3,\r\n        hp: 15,\r\n        veteranHp: 20,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Swordsman: {\r\n        attack: 3,\r\n        defense: 3,\r\n        hp: 15,\r\n        veteranHp: 20,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Archer: {\r\n        attack: 2,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: 15,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Catapult: {\r\n        attack: 4,\r\n        defense: 0,\r\n        hp: 10,\r\n        veteranHp: 15,\r\n        defenseBonus: 0,\r\n        wallBonus: 0\r\n    },\r\n    Knight: {\r\n        attack: 3.5,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: 15,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    'Old Knight': {\r\n        attack: 3.5,\r\n        defense: 1,\r\n        hp: 15,\r\n        veteranHp: 20,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Giant: {\r\n        attack: 5,\r\n        defense: 4,\r\n        hp: 40,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Boat: {\r\n        attack: 1,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Ship: {\r\n        attack: 2,\r\n        defense: 2,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Battleship: {\r\n        attack: 4,\r\n        defense: 3,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Amphibian: {\r\n        attack: 2,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: 15,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Tridention: {\r\n        attack: 3,\r\n        defense: 1,\r\n        hp: 15,\r\n        veteranHp: 20,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Crab: {\r\n        attack: 4,\r\n        defense: 4,\r\n        hp: 40,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    'Battle Sled': {\r\n        attack: 3,\r\n        defense: 2,\r\n        hp: 15,\r\n        veteranHp: 20,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Polytaur: {\r\n        attack: 3,\r\n        defense: 1,\r\n        hp: 15,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Navalon: {\r\n        attack: 4,\r\n        defense: 4,\r\n        hp: 30,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    'Mind Bender': {\r\n        attack: 0,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    'Ice Fortress': {\r\n        attack: 4,\r\n        defense: 3,\r\n        hp: 20,\r\n        veteranHp: 25,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    'Ice Archer': {\r\n        attack: 0.1,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: 15,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    'Dragon Egg': {\r\n        attack: 0,\r\n        defense: 2,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    'Baby Dragon': {\r\n        attack: 3,\r\n        defense: 3,\r\n        hp: 15,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    'Fire Dragon': {\r\n        attack: 4,\r\n        defense: 3,\r\n        hp: 20,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Mooni: {\r\n        attack: 0,\r\n        defense: 2,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    'Nature Bunny': {\r\n        attack: 0,\r\n        defense: 1,\r\n        hp: 20,\r\n        veteranHp: null,\r\n        defenseBonus: 0,\r\n        wallBonus: 0\r\n    },\r\n    Gaami: {\r\n        attack: 4,\r\n        defense: 4,\r\n        hp: 30,\r\n        veteranHp: 35,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 4\r\n    },\r\n    Shaman: {\r\n        attack: 1,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Hexapod: {\r\n        attack: 3,\r\n        defense: 1,\r\n        hp: 5,\r\n        veteranHp: 10,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Phychi: {\r\n        attack: 1,\r\n        defense: 1,\r\n        hp: 5,\r\n        veteranHp: 10,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Raychi: {\r\n        attack: 3,\r\n        defense: 2,\r\n        hp: 15,\r\n        veteranHp: 20,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Kiton: {\r\n        attack: 1,\r\n        defense: 3,\r\n        hp: 15,\r\n        veteranHp: 20,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    'Old Kiton': {\r\n        attack: 1,\r\n        defense: 3,\r\n        hp: 20,\r\n        veteranHp: 25,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Doomux: {\r\n        attack: 4,\r\n        defense: 2,\r\n        hp: 20,\r\n        veteranHp: 25,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Exida: {\r\n        attack: 3,\r\n        defense: 1,\r\n        hp: 10,\r\n        veteranHp: 25,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Centipede: {\r\n        attack: 4,\r\n        defense: 3,\r\n        hp: 20,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Segment: {\r\n        attack: 2,\r\n        defense: 2,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    },\r\n    Dinghy: {\r\n        attack: 0,\r\n        defense: 0.5,\r\n        hp: 5,\r\n        veteranHp: null,\r\n        defenseBonus: 0,\r\n        wallBonus: 0\r\n    },\r\n    Cloak: {\r\n        attack: 0,\r\n        defense: 0.5,\r\n        hp: 5,\r\n        veteranHp: null,\r\n        defenseBonus: 0,\r\n        wallBonus: 0\r\n    },\r\n    Dagger: {\r\n        attack: 2,\r\n        defense: 2,\r\n        hp: 10,\r\n        veteranHp: null,\r\n        defenseBonus: 1.5,\r\n        wallBonus: 0\r\n    }\r\n};\r\n\r\n","import { AttackerData, DefenderData } from '../models/unit-data.model';\r\nimport { unitStats as UNIT_STATS } from '../data/unit-stats.const';\r\nimport { calculateMaxHp } from './calculate-max-hp.util';\r\nimport { freezingUnits, noDefenseUnits } from '../data/unit-list.const';\r\n\r\nconst BOOSTED_FACTOR = .5;\r\nconst POISONED_FACTOR = .8;\r\n\r\nexport function calculateDamage(attacker: AttackerData, defender: DefenderData) {\r\n  const attackerStat = UNIT_STATS[attacker.unit];\r\n  const defenderStat = UNIT_STATS[defender.unit];\r\n\r\n  const attackerMaxHp = calculateMaxHp(attacker);\r\n  const defenderMaxHp = calculateMaxHp(defender);\r\n\r\n  let attackStat = attackerStat.attack;\r\n  if (attacker.isBoosted) {\r\n    attackStat += BOOSTED_FACTOR;\r\n  }\r\n\r\n  let defenseStat = defenderStat.defense;\r\n  let defenseBonus = 1;\r\n  if (defender.isPoisoned) {\r\n    defenseBonus = POISONED_FACTOR;\r\n  } else if (defender.withDefenseBonus && !defender.isPoisoned) {\r\n    defenseBonus = defender.withDefenseBonus === 'withWall' ? defenderStat.wallBonus : defenderStat.defenseBonus;\r\n  }\r\n\r\n  const attackForce = attackStat * ((attacker.hp / attackerMaxHp) as any).toFixed(16);\r\n  const defenseForce = defenseStat * defenseBonus * ((defender.hp / defenderMaxHp) as any).toFixed(16);\r\n  \r\n  const totalForce = attackForce + defenseForce;\r\n  const accelerator = 4.5;\r\n\r\n  const attackDamageTemp = ((attackForce / totalForce) as any).toFixed(16) * attackStat * accelerator as any;\r\n  const defenseDamageTemp = ((defenseForce / totalForce) as any).toFixed(16) * defenseStat * accelerator as any;\r\n  const attackDamage = Math.round(attackDamageTemp);\r\n  let defenseDamage = Math.round(defenseDamageTemp);\r\n\r\n  const defenderNewHp = Math.max(defender.hp - attackDamage, 0);\r\n  let splashedNewHp = null;\r\n  if (attacker.unit === 'Fire Dragon') {\r\n    splashedNewHp = Math.max(defender.hp - Math.floor(attackDamage / 2), 0);\r\n  }\r\n  let attackerNewHp = attacker.hp;\r\n  const noRetaliation = attacker.freeFromRetaliation \r\n                          || noDefenseUnits.includes(defender.unit)\r\n                          || freezingUnits.includes(attacker.unit);\r\n  if (defenderNewHp > 0 && !noRetaliation) {\r\n    attackerNewHp = Math.max(attacker.hp - defenseDamage, 0);\r\n  } else {\r\n    defenseDamage = 0;\r\n  }\r\n\r\n  return { attackDamage, defenseDamage, defenderNewHp, attackerNewHp, splashedNewHp };\r\n}\r\n","import { AttackerData, DefenderData, UnitStat } from '../models/unit-data.model';\r\nimport { unitStats as UNIT_STATS } from '../data/unit-stats.const';\r\nimport { carryUnits } from '../data/unit-list.const';\r\n\r\nexport function calculateMaxHp(unit: AttackerData | DefenderData) {\r\n    if (!unit.unit) {\r\n        return null;\r\n    }\r\n\r\n    // For units with carry skills, such as Boat, Ship and Battleship\r\n    // their health and maxHealth varies based on the unit they are carrying\r\n    // so we will use the carried unit stat for getting maxHp\r\n    let unitStat;\r\n    if (carryUnits.includes(unit.unit)) {\r\n        if (!unit.carriedUnit) {\r\n            return null;\r\n        }\r\n        unitStat = UNIT_STATS[unit.carriedUnit];\r\n    } else {\r\n        unitStat = UNIT_STATS[unit.unit];\r\n    }\r\n    return unit.isVeteran && unitStat.veteranHp ? unitStat.veteranHp : unitStat.hp;\r\n}","export function combine(arrA, arrB) {\r\n    const result = [];\r\n\r\n    arrA.forEach((a) => {\r\n        arrB.forEach((b) => {\r\n            result.push([a, b]);\r\n        });\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n\r\n// function combine(arrA, arrB) {\r\n//     const result = [];\r\n\r\n//     arrA.forEach((a) => {\r\n//         arrB.forEach((b) => {\r\n//             result.push(`${a},${b}`);\r\n//         });\r\n//     });\r\n\r\n//     return result;\r\n// }\r\n\r\n// Array.from(new Set(combine([1,1,2,2,3,3,4,5,5,6], [1,1,2,2,3,3,4,5,5,6]))).map(a => a.split(',')).filter(a => (parseInt(a[0])+parseInt(a[1])) < 5)","export function deepClone(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}","import { BattleResult, BattleResultStatistic } from '../models/battle-result.model';\r\nimport { DefenderData } from '../models/unit-data.model';\r\nimport { calculateDamage } from './calculate-damage.util';\r\nimport { combine } from './combine.util';\r\nimport { deepClone } from './deep-clone.util';\r\nimport { permute } from './permute.util';\r\n\r\nexport function executeBattleMatches(attackers, defenders, getOptimalResult) {\r\n    const attackersPermutations = getOptimalResult ? permute(attackers) : [attackers];\r\n    const defenderPermutations = getOptimalResult ? permute(defenders) : [defenders];\r\n\r\n    const matches = combine(attackersPermutations, defenderPermutations);\r\n\r\n    matches.forEach((match) => {\r\n      const attacker_ = deepClone(match[0]);\r\n      const defenders_ = deepClone(match[1]);\r\n      const { battleResults, unusedAttackerUnits, untouchedDefenderUnits, defenderSurvivors } = executeBattle(attacker_, defenders_);\r\n      const battleResultsStatistic = {...getBattleResultStatistic(battleResults), unusedAttackerUnits, untouchedDefenderUnits, defenderSurvivors};\r\n      match.push(battleResults);\r\n      match.push(battleResultsStatistic);\r\n    });\r\n\r\n    matches\r\n    .sort((matchA, matchB) => {\r\n      const a = matchA[3] as BattleResultStatistic;\r\n      const damageScoreA = a.totalAttackDamage - a.totalDefenseDamage;\r\n\r\n      const b = matchB[3] as BattleResultStatistic;\r\n      const damageScoreB = b.totalAttackDamage - b.totalDefenseDamage;\r\n\r\n      return damageScoreB - damageScoreA;\r\n    })\r\n    .sort((matchA, matchB) => {\r\n      const a = matchA[3] as BattleResultStatistic;\r\n      const survivalScoreA = (a.attackerSurvivors.length + a.unusedAttackerUnits.length + a.defendersKilled.length) - (a.defenderSurvivors.length + a.attackersKilled.length + a.untouchedDefenderUnits.length);\r\n\r\n      const b = matchB[3] as BattleResultStatistic;\r\n      const survivalScoreB = (b.attackerSurvivors.length + b.unusedAttackerUnits.length + b.defendersKilled.length) - (b.defenderSurvivors.length + b.attackersKilled.length + b.untouchedDefenderUnits.length);\r\n\r\n      return survivalScoreB - survivalScoreA;\r\n    });\r\n\r\n    const battleResults = matches[0][2];\r\n    const battleResultStatistics = matches[0][3];\r\n\r\n    return { battleResults, battleResultStatistics };\r\n}\r\n\r\n\r\nexport function executeBattle(attackers, defenders) {\r\n  const battleResults = [];\r\n  const unusedAttackerUnits = [];\r\n  const defenderSurvivors = [];\r\n\r\n  let lastDefenderAttacked = 0;\r\n  attackers.forEach((attacker) => {\r\n    const defenderIndex = defenders.findIndex((d: DefenderData) => d.hp > 0);\r\n    if (typeof defenderIndex !== 'number' || defenderIndex < 0) {\r\n      unusedAttackerUnits.push(attacker);\r\n      return;\r\n    }\r\n    const defender = defenders[defenderIndex];\r\n    const battleResult = calculateBattleResult({...attacker}, {...defender});\r\n    lastDefenderAttacked = defenderIndex;\r\n\r\n    // preserve the original hp for logging in battle summary table\r\n    if (!defender.preservedHp) {\r\n      defender.preservedHp =  defender.hp;\r\n    }\r\n    // use newHp as current defender.hp on next attack\r\n    defender.hp = battleResult.defender.newHp;\r\n    battleResults.push(battleResult);\r\n  });\r\n\r\n  const untouchedDefenderUnits = defenders.slice(lastDefenderAttacked+1);\r\n  const lastBattleDefender = battleResults[battleResults.length - 1].defender;\r\n  if (lastBattleDefender.newHp > 0) {\r\n    defenderSurvivors.push(lastBattleDefender);\r\n  }\r\n\r\n  return {battleResults, unusedAttackerUnits, untouchedDefenderUnits, defenderSurvivors};\r\n}\r\n\r\nexport function getBattleResultStatistic(battleResults: BattleResult[]): Partial<BattleResultStatistic> {\r\n  const attackerSurvivors = [];\r\n  const attackersKilled = [];\r\n  const defendersKilled = [];\r\n  let totalAttackDamage = 0;\r\n  let totalDefenseDamage = 0;\r\n  battleResults.forEach((br) => {\r\n    if (br.attacker.newHp > 0) {\r\n      attackerSurvivors.push({...br.attacker})\r\n    } else {\r\n      attackersKilled.push({...br.attacker})\r\n    }\r\n\r\n    if (br.defender.newHp === 0) {\r\n      defendersKilled.push({...br.defender})\r\n    }\r\n\r\n    totalAttackDamage += br.attacker.attackDamage;\r\n    totalDefenseDamage += br.defender.defenseDamage;\r\n  });\r\n\r\n  return {\r\n    attackerSurvivors,\r\n    attackersKilled,\r\n    defendersKilled,\r\n    totalAttackDamage,\r\n    totalDefenseDamage\r\n  }\r\n}\r\n\r\nexport function calculateBattleResult(attackerData, defenderData) {\r\n  const { attackDamage, defenseDamage, defenderNewHp, attackerNewHp, splashedNewHp } = calculateDamage(attackerData, defenderData);\r\n\r\n  attackerData.origHp = attackerData.hp;\r\n  attackerData.newHp = attackerNewHp;\r\n  attackerData.attackDamage = Math.min(attackDamage, defenderData.hp - defenderNewHp);\r\n\r\n  defenderData.origHp = defenderData.hp;\r\n  defenderData.newHp = defenderNewHp;\r\n  defenderData.splashedNewHp = splashedNewHp;\r\n  defenderData.defenseDamage = Math.min(defenseDamage, attackerData.hp - attackerNewHp);\r\n\r\n  return {\r\n    attacker: attackerData,\r\n    defender: defenderData\r\n  };\r\n}","export function permute(arr: Array<any>) {\r\n    let result = [];\r\n    if (arr.length === 0) return [];\r\n    if (arr.length === 1) return [arr];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const curItem = arr[i];\r\n        const remainingItems = arr.slice(0, i).concat(arr.slice(i + 1));\r\n        const remainingItemsPermuted = permute(remainingItems);\r\n        for (let j = 0; j < remainingItemsPermuted.length; j++) {\r\n            const permutedArray = [curItem].concat(remainingItemsPermuted[j]);\r\n            result.push(permutedArray);\r\n        }\r\n    }\r\n    return result;\r\n}"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}